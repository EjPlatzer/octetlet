// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from '@xata.io/client';
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';
import { XATA_API_KEY } from '$env/static/private';

const tables = [
	{ name: 'question_type', columns: [{ name: 'name', type: 'string' }] },
	{
		name: 'question',
		columns: [
			{ name: 'label', type: 'string' },
			{ name: 'type', type: 'link', link: { table: 'question_type' } }
		]
	},
	{
		name: 'answer',
		columns: [
			{ name: 'question', type: 'link', link: { table: 'question' } },
			{ name: 'label', type: 'string' },
			{ name: 'correct', type: 'bool', notNull: true, defaultValue: 'false' }
		]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type QuestionType = InferredTypes['question_type'];
export type QuestionTypeRecord = QuestionType & XataRecord;

export type Question = InferredTypes['question'];
export type QuestionRecord = Question & XataRecord;

export type Answer = InferredTypes['answer'];
export type AnswerRecord = Answer & XataRecord;

export type DatabaseSchema = {
	question_type: QuestionTypeRecord;
	question: QuestionRecord;
	answer: AnswerRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: 'https://Octetlet-workspace-bpnnrn.us-east-1.xata.sh/db/octetlet'
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient({ apiKey: XATA_API_KEY });
	return instance;
};
